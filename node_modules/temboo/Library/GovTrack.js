
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    Bill
    Retrieves bills and resolutions in the U.S. Congress since 1973 (the 93rd Congress).
*/


var Bill = function(session) {
    /*
        Create a new instance of the Bill Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GovTrack/Bill"
    Bill.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new BillResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new BillInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Bill
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var BillInputSet = function() {
    BillInputSet.super_.call(this);
        /*
        Set the value of the BillID input for this Choreo. ((optional, integer) Specify the ID number of the bill to return only the record for that bill.)
        */
        this.set_BillID = function(value) {
            this.setInput("BillID", value);
        }

        /*
        Set the value of the BillType input for this Choreo. ((optional, string) The bill's type. See documentation for acceptable bill types.)
        */
        this.set_BillType = function(value) {
            this.setInput("BillType", value);
        }

        /*
        Set the value of the Congress input for this Choreo. ((optional, integer) The number of the congress in which the bill was introduced. The current congress is 112.)
        */
        this.set_Congress = function(value) {
            this.setInput("Congress", value);
        }

        /*
        Set the value of the CurrentStatusDate input for this Choreo. ((optional, string) The date of the last major action on the bill corresponding to the CurrentStatus (in YYYY-MM-DD format).)
        */
        this.set_CurrentStatusDate = function(value) {
            this.setInput("CurrentStatusDate", value);
        }

        /*
        Set the value of the CurrentStatus input for this Choreo. ((optional, string) The current status of the bill. See documentation for acceptable inputs.)
        */
        this.set_CurrentStatus = function(value) {
            this.setInput("CurrentStatus", value);
        }

        /*
        Set the value of the IntroducedDate input for this Choreo. ((optional, string) The date the bill was introduced (in YYYY-MM-DD format).)
        */
        this.set_IntroducedDate = function(value) {
            this.setInput("IntroducedDate", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Results are paged 20 per call by default. Set the limit input to a high value to get all of the results at once.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Number input for this Choreo. ((optional, integer) The bill's number (just the integer part).)
        */
        this.set_Number = function(value) {
            this.setInput("Number", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) You can order the results using fieldname (ascending) or -fieldname (descending) where "fieldname" is one of these values: current_status_date, introduced_date, senate_floor_schedule_postdate.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify the format of the response. Default is JSON, but XML is also possible.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the SchedulePostdate input for this Choreo. ((optional, string) The date on which the bill was posted on the Senate Floor Schedule which is different from the date it was expected to be debated (in YYYY-MM-DD format).)
        */
        this.set_SchedulePostdate = function(value) {
            this.setInput("SchedulePostdate", value);
        }

        /*
        Set the value of the Sponsor input for this Choreo. ((optional, integer) The ID of the sponsor of the bill.)
        */
        this.set_Sponsor = function(value) {
            this.setInput("Sponsor", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Bill Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var BillResultSet = function(resultStream) {
    BillResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The resopnse from GovTrack.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Bill, choreography.Choreography);
util.inherits(BillInputSet, choreography.InputSet);
util.inherits(BillResultSet, choreography.ResultSet);
exports.Bill = Bill;


/*
    Person
    Returns members of Congress and U.S. Presidents since the founding of the nation.
*/


var Person = function(session) {
    /*
        Create a new instance of the Person Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GovTrack/Person"
    Person.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new PersonResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new PersonInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Person
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var PersonInputSet = function() {
    PersonInputSet.super_.call(this);
        /*
        Set the value of the FirstName input for this Choreo. ((optional, string) First name of the representative to find.)
        */
        this.set_FirstName = function(value) {
            this.setInput("FirstName", value);
        }

        /*
        Set the value of the Gender input for this Choreo. ((optional, string) The person's gender (male or female). For historical data, gender is sometimes not specified.)
        */
        this.set_Gender = function(value) {
            this.setInput("Gender", value);
        }

        /*
        Set the value of the LastName input for this Choreo. ((optional, string) The representative's last name.)
        */
        this.set_LastName = function(value) {
            this.setInput("LastName", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Results are paged 20 per call by default. Set the limit input to a high value to get all of the results at once.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the MetaVidID input for this Choreo. ((optional, string) The person's ID on metavid.org.)
        */
        this.set_MetaVidID = function(value) {
            this.setInput("MetaVidID", value);
        }

        /*
        Set the value of the MiddleName input for this Choreo. ((optional, string) The representative's middle name.)
        */
        this.set_MiddleName = function(value) {
            this.setInput("MiddleName", value);
        }

        /*
        Set the value of the NameMod input for this Choreo. ((optional, string) The suffix of the person's name, ususally one of Jr., Sr., I, II, etc.)
        */
        this.set_NameMod = function(value) {
            this.setInput("NameMod", value);
        }

        /*
        Set the value of the OSID input for this Choreo. ((optional, integer) The person's ID on opensecrets.org (The Center for Responsive Politics).)
        */
        this.set_OSID = function(value) {
            this.setInput("OSID", value);
        }

        /*
        Set the value of the PVSID input for this Choreo. ((optional, integer) The person's ID on vote-smart.org (Project Vote Smart).)
        */
        this.set_PVSID = function(value) {
            this.setInput("PVSID", value);
        }

        /*
        Set the value of the PersonID input for this Choreo. ((optional, integer) Specify the ID number for a person to retrieve only that person.)
        */
        this.set_PersonID = function(value) {
            this.setInput("PersonID", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify the format of the response. Default is JSON, but XML is also possible.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Roles input for this Choreo. ((optional, string) ID number of a term in Congress or as President that this person has been elected to.)
        */
        this.set_Roles = function(value) {
            this.setInput("Roles", value);
        }

        /*
        Set the value of the TwitterID input for this Choreo. ((optional, string) Official Twitter handle of the representative.)
        */
        this.set_TwitterID = function(value) {
            this.setInput("TwitterID", value);
        }

        /*
        Set the value of the YoutubeID input for this Choreo. ((optional, string) The name of the person't official YouTube channel.)
        */
        this.set_YoutubeID = function(value) {
            this.setInput("YoutubeID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Person Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var PersonResultSet = function(resultStream) {
    PersonResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The resopnse from GovTrack.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Person, choreography.Choreography);
util.inherits(PersonInputSet, choreography.InputSet);
util.inherits(PersonResultSet, choreography.ResultSet);
exports.Person = Person;


/*
    Role
    Returns terms held in office by Members of Congress and U.S. Presidents.
*/


var Role = function(session) {
    /*
        Create a new instance of the Role Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GovTrack/Role"
    Role.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RoleResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RoleInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Role
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RoleInputSet = function() {
    RoleInputSet.super_.call(this);
        /*
        Set the value of the Current input for this Choreo. ((optional, string) Whether the role is currently held, or it is archival information.)
        */
        this.set_Current = function(value) {
            this.setInput("Current", value);
        }

        /*
        Set the value of the District input for this Choreo. ((optional, string) For representatives, the number of their congressional district. 0 for at-large districts, -1 in historical data if the district is not known.)
        */
        this.set_District = function(value) {
            this.setInput("District", value);
        }

        /*
        Set the value of the EndDate input for this Choreo. ((optional, string) The date the role ended - when the person resigned, died, etc. (in YYYY-MM-DD format).)
        */
        this.set_EndDate = function(value) {
            this.setInput("EndDate", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Results are paged 20 per call by default. Set the limit input to a high value to get all of the results at once.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) You can order the results by date using fieldname (ascending) or -fieldname (descending), where "fieldname" is either startdate or enddate.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the Party input for this Choreo. ((optional, string) The political party of the person. If the person changes party, it is usually the most recent party during this role.)
        */
        this.set_Party = function(value) {
            this.setInput("Party", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify the format of the response. Default is JSON, but XML is also possible.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the RoleID input for this Choreo. ((optional, integer) Specify the ID number of a role object to retrieve the record for only that role.)
        */
        this.set_RoleID = function(value) {
            this.setInput("RoleID", value);
        }

        /*
        Set the value of the RoleType input for this Choreo. ((optional, string) Acceptable values: senator, representative, or president.)
        */
        this.set_RoleType = function(value) {
            this.setInput("RoleType", value);
        }

        /*
        Set the value of the SenatorClass input for this Choreo. ((optional, integer) For senators, their election class, which determines which years they are up for election. Acceptable values: class1, class2, class3.)
        */
        this.set_SenatorClass = function(value) {
            this.setInput("SenatorClass", value);
        }

        /*
        Set the value of the StartDate input for this Choreo. ((optional, string) The date the role began  - when the person took office (in YYYY-MM-DD format).)
        */
        this.set_StartDate = function(value) {
            this.setInput("StartDate", value);
        }

        /*
        Set the value of the State input for this Choreo. ((optional, integer) For senators and representatives, the two-letter USPS abbreviation for the state or territory they are serving. See documentation for more on territories and historical data.)
        */
        this.set_State = function(value) {
            this.setInput("State", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Role Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RoleResultSet = function(resultStream) {
    RoleResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The resopnse from GovTrack.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Role, choreography.Choreography);
util.inherits(RoleInputSet, choreography.InputSet);
util.inherits(RoleResultSet, choreography.ResultSet);
exports.Role = Role;


/*
    Vote
    Returns roll call votes in the U.S. Congress since 1789.
*/


var Vote = function(session) {
    /*
        Create a new instance of the Vote Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GovTrack/Vote"
    Vote.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new VoteResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new VoteInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Vote
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var VoteInputSet = function() {
    VoteInputSet.super_.call(this);
        /*
        Set the value of the Category input for this Choreo. ((optional, string) The type of the vote. See documentation for acceptable inputs.)
        */
        this.set_Category = function(value) {
            this.setInput("Category", value);
        }

        /*
        Set the value of the Chamber input for this Choreo. ((optional, string) The chamber in which the vote was held, house or senate.)
        */
        this.set_Chamber = function(value) {
            this.setInput("Chamber", value);
        }

        /*
        Set the value of the Congress input for this Choreo. ((optional, integer) The number of the congress in which the bill was introduced. The current congress is 112.)
        */
        this.set_Congress = function(value) {
            this.setInput("Congress", value);
        }

        /*
        Set the value of the Created input for this Choreo. ((optional, string) The date (and in recent history also the time) on which the vote was held.)
        */
        this.set_Created = function(value) {
            this.setInput("Created", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Results are paged 20 per call by default. Set the limit input to a high value to get all of the results at once.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the Number input for this Choreo. ((optional, integer) The number of the vote, unique to a Congress and session pair.)
        */
        this.set_Number = function(value) {
            this.setInput("Number", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) You can order the results using created (ascending) or -created (descending) for the dates that each vote was held.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the RelatedBill input for this Choreo. ((optional, string) A bill related to this vote.)
        */
        this.set_RelatedBill = function(value) {
            this.setInput("RelatedBill", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify the format of the response. Default is JSON, but XML is also possible.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Session input for this Choreo. ((optional, integer) Session of congress. For congress = 112 roughly covers the period 2011-2012, so session=2011 and session=2012 can each be specified. In historical data sessions may be named in other ways.)
        */
        this.set_Session = function(value) {
            this.setInput("Session", value);
        }

        /*
        Set the value of the VoteID input for this Choreo. ((optional, integer) Specify the ID of a vote object to retrieve the record for just that object.)
        */
        this.set_VoteID = function(value) {
            this.setInput("VoteID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Vote Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var VoteResultSet = function(resultStream) {
    VoteResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The resopnse from GovTrack.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Vote, choreography.Choreography);
util.inherits(VoteInputSet, choreography.InputSet);
util.inherits(VoteResultSet, choreography.ResultSet);
exports.Vote = Vote;


/*
    VoteAndVoter
    Retrieves how people voted on roll call votes in the U.S. Congress since 1789. 
*/


var VoteAndVoter = function(session) {
    /*
        Create a new instance of the VoteAndVoter Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GovTrack/VoteAndVoter"
    VoteAndVoter.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new VoteAndVoterResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new VoteAndVoterInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the VoteAndVoter
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var VoteAndVoterInputSet = function() {
    VoteAndVoterInputSet.super_.call(this);
        /*
        Set the value of the Created input for this Choreo. ((optional, string) The date (and in recent history also the time) on which the vote was held (in YYYY-MM-DD format).)
        */
        this.set_Created = function(value) {
            this.setInput("Created", value);
        }

        /*
        Set the value of the Limit input for this Choreo. ((optional, integer) Results are paged 20 per call by default. Set the limit input to a high value to get all of the results at once.)
        */
        this.set_Limit = function(value) {
            this.setInput("Limit", value);
        }

        /*
        Set the value of the ObjectID input for this Choreo. ((optional, integer) Specify the ID of a vote object to retrieve just that object's record.)
        */
        this.set_ObjectID = function(value) {
            this.setInput("ObjectID", value);
        }

        /*
        Set the value of the Option input for this Choreo. ((optional, string) The way a particular person voted. The value corresponds to the key of an option returned on the Vote Choreo. See documentation for details.)
        */
        this.set_Option = function(value) {
            this.setInput("Option", value);
        }

        /*
        Set the value of the Order input for this Choreo. ((optional, string) You can order the results by date using fieldname (ascending) or -fieldname (descending), where "fieldname" is either startdate or enddate.)
        */
        this.set_Order = function(value) {
            this.setInput("Order", value);
        }

        /*
        Set the value of the Person input for this Choreo. ((optional, integer) The person making this vote. This is an ID number.)
        */
        this.set_Person = function(value) {
            this.setInput("Person", value);
        }

        /*
        Set the value of the ResponseFormat input for this Choreo. ((optional, string) Specify the format of the response. Default is JSON, but XML is also possible.)
        */
        this.set_ResponseFormat = function(value) {
            this.setInput("ResponseFormat", value);
        }

        /*
        Set the value of the Vote input for this Choreo. ((optional, string) The ID number of the vote that this was part of. This is in the form of an ID number.)
        */
        this.set_Vote = function(value) {
            this.setInput("Vote", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the VoteAndVoter Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var VoteAndVoterResultSet = function(resultStream) {
    VoteAndVoterResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. (The resopnse from GovTrack.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(VoteAndVoter, choreography.Choreography);
util.inherits(VoteAndVoterInputSet, choreography.InputSet);
util.inherits(VoteAndVoterResultSet, choreography.ResultSet);
exports.VoteAndVoter = VoteAndVoter;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


