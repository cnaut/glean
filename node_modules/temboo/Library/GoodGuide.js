
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    Query
    Queries the GoodGuide API by keyword and retrieves information on GoodGuide products.
*/


var Query = function(session) {
    /*
        Create a new instance of the Query Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GoodGuide/Query"
    Query.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new QueryResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new QueryInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Query
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var QueryInputSet = function() {
    QueryInputSet.super_.call(this);
        /*
        Set the value of the APIFormat input for this Choreo. ((optional, string) The response type supplied by GoodGuides. Default is reference. Other acceptable inputs are simple and badge.)
        */
        this.set_APIFormat = function(value) {
            this.setInput("APIFormat", value);
        }

        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by GoodGuide.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the Count input for this Choreo. ((optional, integer) The number of entries to return. Default is 20. Up to 50 entries can be returned at once.)
        */
        this.set_Count = function(value) {
            this.setInput("Count", value);
        }

        /*
        Set the value of the Query input for this Choreo. ((required, string) A text string used in the keyword search. By default, queries return product data only. Use the EntityType input to query other types of entities.)
        */
        this.set_Query = function(value) {
            this.setInput("Query", value);
        }

        /*
        Set the value of the SortBy input for this Choreo. ((optional, string) Acceptable values: best_match (for keyword searches, this is the default); rating (the overall GoodGuide rating); and name (sorted alphabetically).)
        */
        this.set_SortBy = function(value) {
            this.setInput("SortBy", value);
        }

        /*
        Set the value of the SortOrder input for this Choreo. ((optional, string) Acceptable values: 'desc' to sort descending (default for sort_by=rating and sort_by is best_match); 'asc' to sort ascending (default for sort_by is name).)
        */
        this.set_SortOrder = function(value) {
            this.setInput("SortOrder", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Query Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var QueryResultSet = function(resultStream) {
    QueryResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from GoodGuide.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Query, choreography.Choreography);
util.inherits(QueryInputSet, choreography.InputSet);
util.inherits(QueryResultSet, choreography.ResultSet);
exports.Query = Query;


/*
    QueryByID
    Retrieves information about products based on a GoodGuide product ID.
*/


var QueryByID = function(session) {
    /*
        Create a new instance of the QueryByID Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GoodGuide/QueryByID"
    QueryByID.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new QueryByIDResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new QueryByIDInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the QueryByID
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var QueryByIDInputSet = function() {
    QueryByIDInputSet.super_.call(this);
        /*
        Set the value of the APIFormat input for this Choreo. ((optional, string) The response type supplied by GoodGuide. Default is simple. Other acceptable inputs are reference and badge.)
        */
        this.set_APIFormat = function(value) {
            this.setInput("APIFormat", value);
        }

        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by GoodGuide.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the ID input for this Choreo. ((required, string) GoodGuide ID number of product.)
        */
        this.set_ID = function(value) {
            this.setInput("ID", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the QueryByID Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var QueryByIDResultSet = function(resultStream) {
    QueryByIDResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from GoodGuide.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(QueryByID, choreography.Choreography);
util.inherits(QueryByIDInputSet, choreography.InputSet);
util.inherits(QueryByIDResultSet, choreography.ResultSet);
exports.QueryByID = QueryByID;


/*
    QueryByUPC
    Retrieves information about products based on the product's UPC code.
*/


var QueryByUPC = function(session) {
    /*
        Create a new instance of the QueryByUPC Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/GoodGuide/QueryByUPC"
    QueryByUPC.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new QueryByUPCResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new QueryByUPCInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the QueryByUPC
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var QueryByUPCInputSet = function() {
    QueryByUPCInputSet.super_.call(this);
        /*
        Set the value of the APIFormat input for this Choreo. ((optional, string) The response type supplied by GoodGuides. Default is simple. Other acceptable inputs are reference and badge.)
        */
        this.set_APIFormat = function(value) {
            this.setInput("APIFormat", value);
        }

        /*
        Set the value of the APIKey input for this Choreo. ((required, string) The API Key provided by GoodGuide.)
        */
        this.set_APIKey = function(value) {
            this.setInput("APIKey", value);
        }

        /*
        Set the value of the UPC input for this Choreo. ((required, string) The UPC number of the product. This consists of 12 numerical barcode digits uniquely assigned to most products sold in North America.)
        */
        this.set_UPC = function(value) {
            this.setInput("UPC", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the QueryByUPC Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var QueryByUPCResultSet = function(resultStream) {
    QueryByUPCResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((xml) The response from GoodGuide.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(QueryByUPC, choreography.Choreography);
util.inherits(QueryByUPCInputSet, choreography.InputSet);
util.inherits(QueryByUPCResultSet, choreography.ResultSet);
exports.QueryByUPC = QueryByUPC;




/******************************************************************************
Begin output wrapper classes
******************************************************************************/

/**
 * Utility function, to retrieve the array-type sub-item specified by the key from the parent (array) specified by the item.
 * Returns an empty array if key is not present.
 */
function getSubArrayByKey(item, key) {
	var val = item[key];
	if(val == null) {
		val = new Array();
	}
	return val;
}


