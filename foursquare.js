// Generated by CoffeeScript 1.6.3
(function() {
  var Foursquare, categorizeVenue, getFoursquareData, getRunkeeperData, healthy, healthyPoints, netPoints, unhealthy, unhealthyPoints;

  Foursquare = require("temboo/Library/Foursquare/Users");

  healthy = [];

  healthyPoints = 0;

  unhealthy = [];

  unhealthyPoints = 0;

  netPoints = 0;

  getFoursquareData = function(response, session) {
    var checkinsByUserChoreo, checkinsByUserInputs;
    checkinsByUserChoreo = new Foursquare.CheckinsByUser(session);
    checkinsByUserInputs = checkinsByUserChoreo.newInputSet();
    checkinsByUserInputs.setCredential('Foursquare');
    return checkinsByUserChoreo.execute(checkinsByUserInputs, (function(results) {
      var checkinsData, data, item, items, pointsClass, _i, _len;
      checkinsData = JSON.parse(results.get_Response());
      items = checkinsData.response.checkins.items;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        categorizeVenue(item.venue);
      }
      healthyPoints = healthy.length;
      unhealthyPoints = unhealthy.length;
      netPoints = healthyPoints + unhealthyPoints;
      pointsClass = (netPoints >= 0 ? "positive-points" : "negative-points");
      data = {
        checkinsData: checkinsData,
        healthy: healthy,
        healthyPoints: healthyPoints,
        unhealthy: unhealthy,
        unhealthyPoints: unhealthyPoints,
        netPoints: netPoints,
        pointsClass: pointsClass
      };
      return response.render("foursquare", data);
    }), function(error) {
      return console.log(error.type);
    });
  };

  categorizeVenue = function(venue) {
    if (venue.categories[0].name.indexOf("Restaurant") !== -1) {
      unhealthy.push(venue.name);
    }
    if (venue.categories[0].name.indexOf("Gym") !== -1) {
      return healthy.push(venue.name);
    }
  };

  module.exports = {
    getFoursquareData: getFoursquareData
  };

  getRunkeeperData = function(response, session) {
    var retrieveActivitesChoreo, retrieveActivitesInputs;
    retrieveActivitesChoreo = new RunKeeper.RetrieveActivites(session);
    retrieveActivitesInputs = retrieveActivitesChoreo.newInputSet();
    retrieveActivitesInputs.setCredential("Runkeeper");
    return retrieveActivitesChoreo.execute(retrieveActivitesInputs, (function(results) {
      return response.render("runkeeper", JSON.parse(results.get_Response()));
    }), function(error) {
      console.log(error.type);
      return console.log(error.message);
    });
  };

}).call(this);
